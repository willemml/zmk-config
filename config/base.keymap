#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "../zmk-nodefree-config/helper.h"

#define L_BASE 0
#define L_NUMS 1
#define L_SYMS 2
#define L_RECR 3

#include "extra_keys.h"

#define XXX &none
#define ___ &trans

/*                              34 KEY MATRIX / LAYOUT MAPPING

           ╭───────────────┬────────────────╮                 ╭─────────────────┬─────────────────╮
  ╭────────╯ 0   1   2   3 │  4   5   6   7 ╰───────╮ ╭───────╯ LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 ╰───────╮
  │  8   9  10  11  12  13 │ 14  15  16  17  18  19 │ │ LM5 LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 RM5 │
  ╰───╮ 20  21  22  23  24 │ 25  26  27  28  29 ╭───╯ ╰───╮ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 ╭───╯
      ╰───────────╮ 30  31 │ 32  33 ╭───────────╯         ╰───────────╮ LH1 LH0 │ RH0 RH1 ╭───────────╯
                  ╰────────┴────────╯                                 ╰─────────┴─────────╯             */

#define KEYS_L 0 1 2 3 8 9 10 11 12 13 20 21 22 23 24 30 31
#define KEYS_R 4 5 6 7 14 15 16 17 18 19 25 26 27 28 29 32 33

/* Global settings */

#define QUICK_TAP_MS 175
#define TAPPING_TERM_LAYERS 175
#define PRIOR_IDLE_MS 100
#define TAPPING_TERM_MS 250

#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <PRIOR_IDLE_MS>;

&lt {  // layer-tap config
	flavor = "balanced";
	tapping-term-ms = <TAPPING_TERM_LAYERS>;
	quick-tap-ms = <QUICK_TAP_MS>;
};

&mt {
	tapping-term-ms = <TAPPING_TERM_LAYERS>;
};

/* left-hand HRMs */
ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <TAPPING_TERM_MS>;
    quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
    require-prior-idle-ms = <PRIOR_IDLE_MS>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* Combos and chords, the basis of basically this entire layout. */

#define COMBO_JOINTLY_MS 25
#define COMBO_LAZILY_MS 50

//ZMK_COMBO(name, bindings, keypos, layers, timeout)

ZMK_COMBO(c_terminal, &kp LC(ENTER), LM4 LM5, ALL, COMBO_JOINTLY_MS)

ZMK_COMBO(c_bksp, &kp BSPC, RT2 RT3, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_esc, &kp ESC, LT3 LT2, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_ent, &kp ENTER, RM3 RM4, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_tab, &kp TAB, RM2 RM3 RM4, ALL, COMBO_JOINTLY_MS)

ZMK_COMBO(c_lshift, &kp LSHIFT, LM2 LM3, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_rshift, &kp RSHIFT, RM2 RM3, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_capsword, &caps_word, LM2 LM3 RM3 RM2, ALL, COMBO_JOINTLY_MS)

ZMK_COMBO(c_slash, &kp SLASH, RM1 RT2 RT3, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_pipe, &kp PIPE, LM1 LT2 LT3, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_under, &kp UNDERSCORE, RB1 RB2 RB3, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_minus, &kp MINUS, LB1 LB2 LB3, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_lparen, &kp LPAR, LT0 LM0, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_rparen, &kp RPAR, RT0 RM0, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_lbrk, &kp LBKT, LM0 LB0, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_rbrk, &kp RBKT, RM0 RB0, ALL, COMBO_JOINTLY_MS)

ZMK_COMBO(c_arrup, &kp UP, LT1 LT2, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_arrright, &kp RIGHT, LM1 LM2, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_arrdown, &kp DOWN, LB2 LB3, ALL, COMBO_JOINTLY_MS)
ZMK_COMBO(c_arrleft, &kp LEFT, LM4 LM3, ALL, COMBO_JOINTLY_MS)

ZMK_COMBO(c_bootloader, &bootloader, 8 9 20 31 32 18 19 29, ALL, COMBO_LAZILY_MS)

// misc aliases
#define C_S_SPACE &kp LC(LS(SPACE))
#define A_S_SPACE &kp LA(LS(SPACE))
#define NUMS_SPACE &lt L_NUMS SPACE

/* Keymap */

ZMK_LAYER(base,
//                             ╭─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────╮
                                 &kp W         &kp F         &kp P         &kp G           &kp J         &kp L         &kp U         &kp Y
// ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮
     &kp Q         &kp A         &kp R         &kp S         &hml LCTL T   &hml LGUI D     &hmr LGUI H   &hmr LCTL N   &kp E         &kp I         &kp O         &kp SEMICOLON
// ╰─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                   &kp Z         &kp X         &kp C         &kp V         &kp B           &kp K         &kp M         &kp COMMA     &kp DOT       &kp SQT
//               ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                             &kp LCTL      NUMS_SPACE      &key_repeat   &mo L_SYMS 
//                                                         ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)

ZMK_LAYER(nums,
//                             ╭─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────╮
                                 &kp F7        &kp F8        &kp F9        &kp F12         &to L_RECR    &kp N7        &kp N8        &kp N9
// ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮
     &mo L_SYMS    XXX           &kp F4        &kp F5        &kp F6        &kp F11         XXX           &kp N4        &kp N5        &kp N6        &kp DOT       &mo L_SYMS
// ╰─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                   XXX           &kp F1        &kp F2        &kp F3        &kp F10         XXX           &kp N1        &kp N2        &kp N3        &kp N0
//               ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                             ___           ___             &kp LGUI      &kp LCTL
//                                                         ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)

ZMK_LAYER(syms,
//                             ╭─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────╮
                                 &kp EXCL      &kp AT        &kp POUND     &kp DLLR        &kp PRCNT     &kp CARET     &kp AMPS      &kp STAR
// ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮
     XXX           XXX           XXX           &kp UNDER     &kp MINUS     &kp LPAR        &kp RPAR      &kp QUESTION  &kp EQUAL     &kp PLUS      XXX           XXX
// ╰─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                   XXX           XXX           XXX           XXX           &kp LBKT        &kp RBKT      XXX           XXX           XXX           XXX
//               ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                             ___           &kp LSHFT       ___           ___
//                                                         ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)

ZMK_LAYER(recurva,
//                             ╭─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────╮
                                 &kp R         &kp D         &kp P         &kp V           &kp Q         &kp J         &kp U         &kp O
// ╭─────────────┬─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┬─────────────╮
     &kp F         &kp S         &kp N         &kp T         &kp C         &kp B           &kp DOT       &kp H         &kp E         &kp A         &kp I         &kp Y
// ╰─────────────├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤─────────────╯
                   &kp Z         &kp X         &kp K         &kp G         &kp W           &kp M         &kp L         &kp SEMICOLON &kp SQT       &kp COMMA
//               ╰─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────╯
                                                             &to L_BASE    NUMS_SPACE      ___           &kp LGUI
//                                                         ╰─────────────┴─────────────╯ ╰─────────────┴─────────────╯
)
